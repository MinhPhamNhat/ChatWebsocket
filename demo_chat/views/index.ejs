<html>


<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/css/bootstrap.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/js/bootstrap.min.js"></script>


    <link href="stylesheets/main.css" rel="stylesheet">
    <script src="javascript/main.js"></script>


    <link href="//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css" rel="stylesheet" id="bootstrap-css">
    <script src="//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>




    <title>Chat</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.5.0/css/all.css" integrity="sha384-B4dIYHKNBt8Bc12p+WXckhzcICo0wtJAoU8YZTY5qE0Id1GSseTk6S+L3BlXeVIU" crossorigin="anonymous">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/malihu-custom-scrollbar-plugin/3.1.5/jquery.mCustomScrollbar.min.css">
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/malihu-custom-scrollbar-plugin/3.1.5/jquery.mCustomScrollbar.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-mousewheel/3.1.13/jquery.mousewheel.min.js"></script>
</head>
<style>
    .typing-msg{
        display: none;
        color: white;
    }
</style>
<body>
    <div class="container-fluid h-100">
        <div class="row justify-content-center">
            <div class="head_bar chat card">
                <div class="d-flex bd-highlight">
                    <div class="img_cont">
                        <div class="avatar rounded-circle"><b><img src="<%=user.picture%>"></b></div>
                    </div>
                    <div class="user_info">
                        <span><%= user.name %></span>
                    </div>
                    <span onclick="window.location.href = window.location.origin+'/signout'" id="action_menu_btn"><i class="fas fa-sign-out-alt"></i></span>
                </div>
            </div>
        </div>
        <div class="row justify-content-center h-100">
            <div class="col-md-4 col-xl-3 chat">
                <div class="card mb-sm-3 mb-md-0 contacts_card">
                    <div class="card-header">
                        <div class="input-group">
                            <input type="text" placeholder="Search..." name="" onkeyup=searchingCatch(this) class="form-control search search-holder">
                            <div class="input-group-prepend">
                                <span class="input-group-text search_btn"><i class="fas fa-search"></i></span>
                            </div>
                        </div>
                    </div>
                    <div class="card-body contacts_body">
                        <ui class="contacts">
                        </ui>
                        <div id="online-notification" class="alert alert-success position-fixed small" style="bottom: 20px; left: 20px">
                            <strong></strong> vừa mới online
                        </div>
                        <div id="offline-notification" class="alert alert-danger position-fixed small" style="bottom: 20px; right: 20px">
                            <strong></strong> đã thoát khỏi ứng dụng
                        </div>
                        <input type="hidden" id="hidden-user-id" value='<%= user._id %>'>
                    </div>
                    <div class="card-footer"></div>
                </div>
            </div>
            <div class="chat_room col-md-8 col-xl-6 chat">
                <div class="card">
                </div>
            </div>
        </div>
    </div>
</body>
<script src="https://cdnjs.cloudflare.com/ajax/libs/qs/6.10.1/qs.min.js" integrity="sha512-aTKlYRb1QfU1jlF3k+aS4AqTpnTXci4R79mkdie/bp6Xm51O5O3ESAYhvg6zoicj/PD6VYY0XrYwsWLcvGiKZQ==" crossorigin="anonymous"></script>
<script src="/socket.io/socket.io.js"></script>
<script src="https://cdn.socket.io/3.1.3/socket.io.min.js" integrity="sha384-cPwlPLvBTa3sKAgddT6krw0cJat7egBga3DJepJyrLl4Q9/5WLra3rrnMcyTyOnh" crossorigin="anonymous"></script>
<script>
    var userId;
    var currentChat;

    $(document).ready(() => {
        // Lấy id người dùng trên database
        userId = $("#hidden-user-id").val();

    })

    const socket = io();
    var id;
    socket.on('connect', () => {
        socket.emit("user-join", userId)

        // socket.on('user-id', (userId) => {
        //     id = userId
        // })

        socket.on('list-user', showUserOnline)

    })

    var typingTimer;
    var doneTypingInterval = 1000;

    const typingCatch = (e) => {
        var userChatId = e.dataset.id
        var name = e.dataset.name
        socket.emit("typing", { userSendChat: userId, userChatId, name })
        clearTimeout(typingTimer);
        typingTimer = setTimeout(() => { socket.emit("typing-done",  {  userSendChat: userId,userChatId, name }) }, doneTypingInterval);
    }

    const typingStopCatch = (e) => {
        clearTimeout(typingTimer);
    }

    socket.on("typing", (data) => {
        console.log(data)
        $(`.chat-${data.userSendChat} .typing-msg strong`).text(data.name)
        $(`.chat-${data.userSendChat} .typing-msg `).show()
    })

    socket.on("typing-done", (data) => {
        $(`.chat-${data.userSendChat} .typing-msg strong`).text('')
        $(`.chat-${data.userSendChat} .typing-msg `).hide()
    })

    const createMessage = (message) => {
        var isSender = message.fromUser.userId===userId
        console.log(message)
        if (isSender){
            var msgCont = $(`.chat-${message.toUser.userId} .msg_card_body `)
        }else{
            var msgCont = $(`.chat-${message.fromUser.userId} .msg_card_body `)
        }
        msgCont.append(createMessageTag(message, isSender))
        msgCont.animate({ scrollTop: msgCont[0].scrollHeight}, 1000);
    }

    const formatTime = (time) => {
        var time = new Date(time)
        var hours = time.getHours()/10>=1?time.getHours():"0"+time.getHours()
        var minutes = time.getMinutes()/10>=1?time.getMinutes():"0"+time.getMinutes()
        return `${hours}:${minutes}`
    }

    const createMessageTag = (message, isSender)=>{
        if (isSender){
            return `
            <div class="d-flex justify-content-end mb-4">
                <div class="msg_cotainer_send">
                    ${message.message}
                    <span class="msg_time_send">${formatTime(message.time)}</span>
                </div>
                <div class="img_cont_msg">
                    <img src=" ${message.fromUser.picture}" class="rounded-circle user_img_msg">
                </div>
            </div>
            `
        }else{
            return `
            <div class="d-flex justify-content-start mb-4">
                <div class="img_cont_msg">
                    <img src="${message.fromUser.picture}" class="rounded-circle user_img_msg">
                </div>
                <div class="msg_cotainer">
                    ${message.message}
                    <span class="msg_time">${formatTime(message.time)}</span>
                </div>
            </div>
            `
        }
    }

    const sendChat = (e) =>{
        var keycode = e.which || e.keyCode;
        if (keycode === 13){
            var userChatId = e.target.dataset.id
            var message = e.target.value
            if (message){
                socket.emit('send-message', {from: userId, message, to:userChatId})
            }
        }
    }

    socket.on("send-message", (data)=>{
        console.log(data)
        createMessage(data)
    })

    const searchingCatch = (e) => {
        var text = e.value
        socket.emit("searching", {
                text
            })
    }

    const chatWith = (e) => {
        var userIdClicked = e.dataset.id
        currentChat = userIdClicked
        
        socket.emit("get-into-chat", ({fromUser: userId, toUser: userIdClicked}))
        
        socket.on("get-into-chat", (data) => {
            var userClickedInfo = data.user
            var messages = data.messages

            if (userClickedInfo) {

                createChatTab(userClickedInfo)

                var msgCont = $(`.chat-${userClickedInfo._id}  .msg_card_body`)

                messages.forEach(msg => {
                    msgCont.append(createMessageTag(msg, msg.fromUser._id===userId))
                })
                
                msgCont.animate({ scrollTop: msgCont[0].scrollHeight}, 1000);
            }
        })
    }
    
    const createChatTab = (userInChat) => {
        $('li[class*="active"]').removeClass("active")
                $(`.user-${userInChat._id}`).addClass("active")
                $(".chat_room .card").remove()
                var div = document.createElement('div')
                div.innerHTML =
                    `
                <div class="card chat-${userInChat._id}" data-id ="${userInChat._id}">
                    <div class="card-header msg_head">
                        <div class="d-flex bd-highlight">
                            <div class="img_cont">
                                <div class="avatar rounded-circle"><b><img src="${userInChat.picture}"></b></div>
                                <span class="online_icon ${!userInChat.active?"offline":""}"></span>
                            </div>
                            <div class="user_info">
                                <span>${userInChat.name}</span>
                            </div>
                            <div class="video_cam">
                                <span><i class="fas fa-phone"></i></span>
                                <span><i class="fas fa-video"></i></span>
                            </div>
                        </div>
                        <span id="action_menu_btn"><i class="fas fa-ellipsis-v"></i></span>
                        <div class="action_menu">
                            <ul>
                                <li><i class="fas fa-user-circle"></i> View profile</li>
                                <li><i class="fas fa-users"></i> Add to close friends</li>
                                <li><i class="fas fa-plus"></i> Add to group</li>
                                <li><i class="fas fa-ban"></i> Block</li>
                            </ul>
                        </div>
                    </div>
                    <div class="card-body msg_card_body">
                    </div>
                    <div class="card-footer">
                        <p class="typing-msg"><strong></strong> đang gõ ... </p>
                        <div id="form" class="input-group" action="">
                            <input id="input"  onkeyup="sendChat(event) ; typingCatch(this)" onkeydown=typingStopCatch(this) data-id="${userInChat._id}" data-name="${userInChat.name}" class="form-control type_msg" autocomplete="off" placeholder="Type your message..." />
                            <div class="input-group-append">
                                <button class="input-group-text send_btn"><i class="fas fa-location-arrow"></i></button>
                            </div>
                        </div>

                    </div>

                </div>
            `
                document.querySelector('.chat_room').appendChild(div)
    }

    const showUserOnline = ({
        users,
        eventUser,
    }) => {
        var numberOfOnline = users.length - 1
        $(".contacts li").remove()
        users.sort(value => value.active ? -1 : 1)
        users.forEach(u => {
                // Nếu người dùng trong user-list có id trên db trùng với userId được lấy ở trên thì bỏ qua không hiển thị trên list
                if (u.userId !== userId)
                    $(".contacts").append(createUserTag(u))
                else {
                    console.log(u.id, u.name)
                }
            })
            // Nếu người vừa online hay disconnect có id trên db trùng với userId được lấy ở trên thì không hiển thị thông báo,
            // nếu không thì hiển thị thông báo cho toàn server
        if (eventUser)
            if (eventUser.userId !== userId) {
                if (eventUser.action) {
                    $("#online-notification strong").text(eventUser.name)
                    $("#online-notification").show(300)
                    setTimeout(() => {
                        $("#online-notification").hide(300)
                    }, 2000)
                } else {
                    $("#offline-notification strong").text(eventUser.name)
                    $("#offline-notification").show(300)
                    setTimeout(() => {
                        $("#offline-notification").hide(300)
                    }, 2000)
                }
            }
    }

    const createUserTag = (user) => `
        <li class="user-${user.userId} ${currentChat === user.userId?"active":""}">
            <div class="d-flex bd-highlight user_cont" data-id="${user.userId}" onclick=chatWith(this)>
                <div class="img_cont">
                    <div class="avatar rounded-circle"><b><img src="${user.picture}"></b></div>
                    <span class="online_icon ${user.active?"":"offline"}"></span>
                </div>
                <div class="user_info">
                    <span>${user.name}</span>
                    <p>${user.active?"Online":"Offline"}</p>
                </div>
            </div>
        </li>`

    // ${user.name.split(" ")[user.name.split(" ").length-1][0]}
</script>

</html>